"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const xml2js = __importStar(require("xml2js"));
const path = __importStar(require("path"));
const metaRegex = new RegExp(/(?<name>[\w-\.]+)\.(?<type>\w.+)-meta$/);
function declaration(type, name) {
    let modulePath;
    switch (type) {
        case 'asset':
            modulePath = `@salesforce/contentAssetUrl/${name}`;
            break;
        case 'resource':
            modulePath = `@salesforce/resourceUrl/${name}`;
            break;
        case 'messageChannel':
            modulePath = `@salesforce/messageChannel/${name}__c`;
            break;
        case 'customLabel':
            modulePath = `@salesforce/label/c.${name}`;
            break;
        default:
            throw new Error(`${type} not supported`);
    }
    return `declare module "${modulePath}" {
    var ${name}: string;
    export default ${name};
}`;
}
class Typing {
    constructor(attributes) {
        if (!Typing.allowedTypes.includes(attributes.type)) {
            const errorMessage = 'Cannot create a Typing with "' + attributes.type + '" type. Must be one of [' + Typing.allowedTypes.toString() + ']';
            throw new Error(errorMessage);
        }
        this.type = attributes.type;
        this.name = attributes.name;
        this.fileName = `${attributes.name}.${attributes.type}.d.ts`;
    }
    static fromMeta(metaFilename) {
        const parsedPath = path.parse(metaFilename);
        const { name, type } = metaRegex.exec(parsedPath.name).groups;
        return new Typing({ name, type });
    }
    static async declarationsFromCustomLabels(xmlDocument) {
        const doc = await new xml2js.Parser().parseStringPromise(xmlDocument);
        if (doc.CustomLabels === undefined || doc.CustomLabels.labels === undefined) {
            return '';
        }
        const declarations = doc.CustomLabels.labels.map((label) => {
            return declaration('customLabel', label.fullName[0]);
        });
        return declarations.join('\n');
    }
    get declaration() {
        return declaration(this.type, this.name);
    }
}
Typing.allowedTypes = ['asset', 'resource', 'messageChannel', 'customLabel'];
exports.default = Typing;
//# sourceMappingURL=typing.js.map