"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LWCDataProvider = void 0;
const fs = __importStar(require("fs-extra"));
const path_1 = require("path");
class LWCDataProvider {
    constructor(attributes) {
        this.activated = false;
        this.indexer = attributes.indexer;
        const standardData = fs.readFileSync((0, path_1.join)(__dirname, 'resources/standard-lwc.json'), 'utf-8');
        const standardJson = JSON.parse(standardData);
        this._standardTags = standardJson.tags;
        this._globalAttributes = standardJson.globalAttributes;
    }
    getId() {
        return 'lwc';
    }
    isApplicable() {
        return this.activated;
    }
    provideTags() {
        const customTags = this.indexer.customData.map(tag => {
            return {
                name: tag.lwcName,
                description: tag.description,
                attributes: tag.attributes,
            };
        });
        return [...this._standardTags, ...customTags];
    }
    provideAttributes(tagName) {
        const tag = this.provideTags().find(t => t.name === tagName);
        return [...this._globalAttributes, ...((tag === null || tag === void 0 ? void 0 : tag.attributes) || [])];
    }
    provideValues() {
        const values = [];
        this.indexer.customData.forEach(t => {
            var _a;
            (_a = t.classMembers) === null || _a === void 0 ? void 0 : _a.forEach(cm => {
                const bindName = `${t.name}.${cm.name}`;
                values.push({ name: cm.name, description: `${bindName}` });
            });
        });
        return values;
    }
}
exports.LWCDataProvider = LWCDataProvider;
//# sourceMappingURL=lwc-data-provider.js.map