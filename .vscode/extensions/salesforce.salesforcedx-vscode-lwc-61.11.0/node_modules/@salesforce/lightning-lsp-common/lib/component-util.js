"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isJSComponent = exports.componentFromDirectory = exports.componentFromFile = exports.moduleFromDirectory = exports.moduleFromFile = exports.tagFromDirectory = exports.tagFromFile = void 0;
const path = __importStar(require("path"));
const decamelize_1 = __importDefault(require("decamelize"));
// TODO investigate more why this happens
function splitPath(filePath) {
    let pathElements = filePath.dir.split(path.sep);
    // Somehow on windows paths are occassionally using forward slash
    if (path.sep === '\\' && filePath.dir.indexOf('\\') === -1) {
        pathElements = filePath.dir.split('/');
    }
    return pathElements;
}
function nameFromFile(file, sfdxProject, converter) {
    const filePath = path.parse(file);
    const fileName = filePath.name;
    const pathElements = splitPath(filePath);
    const parentDirName = pathElements.pop();
    if (fileName === parentDirName) {
        const namespace = sfdxProject ? 'c' : pathElements.pop();
        return converter(namespace, parentDirName);
    }
    return null;
}
function nameFromDirectory(file, sfdxProject, converter) {
    const filePath = path.parse(file);
    if (sfdxProject) {
        return converter('c', filePath.name);
    }
    else {
        // TODO verify
        return converter(splitPath(filePath).pop(), filePath.name);
    }
}
function tagName(namespace, tag) {
    if (namespace === 'interop') {
        // treat interop as lightning, i.e. needed when using extension with lightning-global
        // TODO: worth to add WorkspaceType.LIGHTNING_GLOBAL?
        namespace = 'lightning';
    }
    // convert camel-case to hyphen-case/kebab-case
    return namespace + '-' + (0, decamelize_1.default)(tag, '-');
}
function moduleName(namespace, tag) {
    if (namespace === 'interop') {
        // treat interop as lightning, i.e. needed when using extension with lightning-global
        // TODO: worth to add WorkspaceType.LIGHTNING_GLOBAL?
        namespace = 'lightning';
    }
    // convert camel-case to hyphen-case/kebab-case
    return namespace + '/' + tag;
    // TODO confirm we shouldn't be doing this anymore
    // + decamelize(tag, '-');
}
function componentName(namespace, tag) {
    return namespace + ':' + tag;
}
/**
 * @param file path to main .js/.html for component, i.e. card/card.js or card/card.html
 * @return tag name, i.e. c-card or namespace-card, or null if not the .js/.html file for a component
 */
function tagFromFile(file, sfdxProject) {
    return nameFromFile(file, sfdxProject, tagName);
}
exports.tagFromFile = tagFromFile;
function tagFromDirectory(file, sfdxProject) {
    return nameFromDirectory(file, sfdxProject, tagName);
}
exports.tagFromDirectory = tagFromDirectory;
/**
 * @param file path to main .js/.html for component, i.e. card/card.js or card/card.html
 * @return module name, i.e. c/card or namespace/card, or null if not the .js/.html file for a component
 */
function moduleFromFile(file, sfdxProject) {
    return nameFromFile(file, sfdxProject, moduleName);
}
exports.moduleFromFile = moduleFromFile;
function moduleFromDirectory(file, sfdxProject) {
    return nameFromDirectory(file, sfdxProject, moduleName);
}
exports.moduleFromDirectory = moduleFromDirectory;
function componentFromFile(file, sfdxProject) {
    return nameFromFile(file, sfdxProject, componentName);
}
exports.componentFromFile = componentFromFile;
function componentFromDirectory(file, sfdxProject) {
    return nameFromDirectory(file, sfdxProject, componentName);
}
exports.componentFromDirectory = componentFromDirectory;
/**
 * @return true if file is the main .js file for a component
 */
function isJSComponent(file) {
    if (!file.toLowerCase().endsWith('.js')) {
        return false;
    }
    return tagFromFile(file, true) !== null;
}
exports.isJSComponent = isJSComponent;
//# sourceMappingURL=component-util.js.map