import { ScriptFileType } from '../../script-metadata/utils';
import { File, SourceLocation } from './common-metadata-types';
import { LuvioMetadata } from './luvio-metadata-types';
interface ScriptFile extends File {
    fileType: ScriptFileType;
    moduleReferences: ModuleReference[];
    classes: Class[];
    /**
     * If the file has uses an "export default <ClassDeclaration | Identifier that resolved to a local class>",
     * this property provides a reference to the class metadata.
     */
    mainClass?: {
        name?: string;
        refId: ID;
    };
    imports: Import[];
    dynamicImports: DynamicImport[];
    exports: Export[];
    domEvents: DOMEvent[];
    eventListeners: ProgrammaticEventListener[];
    eventsDispatched: EventDispatch[];
    luvioMetadata?: LuvioMetadata;
}
declare function isScriptFile(file: File): file is ScriptFile;
interface Class {
    name?: string;
    isComponentClass?: boolean;
    extends?: ParentClass;
    properties: ClassProperty[];
    methods: ClassMethod[];
    location: SourceLocation;
    id: ID;
    __internal__doc: string | undefined;
}
interface ClassProperty {
    type: 'Property';
    name: string;
    propertyType: 'accessor' | 'dataProperty';
    dataProperty?: DataProperty;
    getter?: Getter;
    setter?: Setter;
    decorators: LwcDecorator[];
    static: boolean;
    __internal__doc: string | undefined;
}
interface DataProperty {
    initialValue: Value;
    location: SourceLocation;
}
interface Getter {
    initialValue: Value;
    location: SourceLocation;
}
interface Setter {
    location: SourceLocation;
}
interface ClassMethod {
    type: 'Method';
    name: string;
    decorators: LwcDecorator[];
    __internal__doc: string | undefined;
    location: SourceLocation;
}
interface Decorator {
    type: string;
    location: SourceLocation;
}
interface ApiDecorator extends Decorator {
    type: 'Api';
}
interface TrackDecorator extends Decorator {
    type: 'Track';
}
interface WireDecorator extends Decorator {
    type: 'Wire';
    adapterId: {
        importedName: string;
        localName: string;
        location: SourceLocation;
    };
    adapterModule: string;
    adapterConfig?: {
        reactive: {
            [prop: string]: ReactiveWireProperty;
        };
        static: {
            [prop: string]: StaticWireProperty;
        };
    };
}
interface ReactiveWireProperty {
    keyLocation: SourceLocation;
    classProperty: string;
    valueLocation: SourceLocation;
}
interface StaticWireProperty {
    keyLocation: SourceLocation;
    value: Value;
    valueLocation: SourceLocation;
}
type LwcDecorator = ApiDecorator | TrackDecorator | WireDecorator;
interface UnresolvedValue {
    type: 'Unresolved';
    value: 'unresolved';
}
interface NumberValue {
    type: 'Number';
    value: number;
}
interface BooleanValue {
    type: 'Boolean';
    value: boolean;
}
interface StringValue {
    type: 'String';
    value: string;
}
interface NullValue {
    type: 'Null';
    value: null;
}
interface UndefinedValue {
    type: 'Undefined';
    value: undefined;
}
interface ObjectValue {
    type: 'Object';
    value: {
        [name: string]: Value;
    };
}
interface ArrayValue {
    type: 'Array';
    value: Value[];
}
interface ImportedValue {
    type: 'ImportedValue';
    localName: string;
    importedName: string;
    moduleSpecifier: string;
}
type Value = BooleanValue | StringValue | NullValue | ObjectValue | ArrayValue | UndefinedValue | NumberValue | UnresolvedValue | ImportedValue;
interface Import {
    defaultBinding?: DefaultBinding;
    namedImports?: NamedImport[];
    namespaceImport?: NamespaceImport;
    moduleSpecifier: string;
    location: SourceLocation;
    refId: ID;
}
interface DefaultBinding {
    name: string;
    location: SourceLocation;
}
interface NamedImport {
    name: string;
    aliasName?: string;
    location: SourceLocation;
}
interface NamespaceImport {
    aliasName: string;
    location: SourceLocation;
}
declare enum ModuleNameType {
    UNRESOLVED = "unresolved",
    STRING = "string"
}
interface DynamicImport {
    moduleSpecifier: string;
    moduleNameType: ModuleNameType;
    location: SourceLocation;
    hints: DynamicImportHint[];
}
interface DynamicImportHint {
    rawValue: string;
    key: string;
    value: string;
    location: SourceLocation;
}
interface Export {
    namedExports?: NamedExport[];
    defaultExport?: DefaultExport;
    location: SourceLocation;
    moduleSpecifier?: string;
    refId?: ID;
}
interface NamedExport {
    localName?: string;
    exportedName: string;
    location: SourceLocation;
}
interface DefaultExport {
    location: SourceLocation;
}
interface DOMEvent {
    eventType: string;
    interface: 'Event' | 'CustomEvent';
    options?: {
        bubbles?: boolean;
        composed?: boolean;
    };
    location: SourceLocation;
    id: ID;
}
interface ProgrammaticEventListener {
    eventType: string;
    targetType: 'host' | 'shadowRoot' | 'document' | 'window' | 'unresolved';
    options?: {
        capture?: boolean;
    };
    location: SourceLocation;
}
interface EventDispatch {
    targetType: 'host' | 'shadowRoot' | 'document' | 'window' | 'unresolved';
    event: {
        refId: ID;
    } | 'unresolved';
    location: SourceLocation;
}
type ParentClass = {
    name: string;
    refId?: ID;
    location: SourceLocation;
} | {
    name: string;
    moduleSpecifier: string;
    refId: ID;
    location: SourceLocation;
} | 'unresolved';
type SfdcResourceType = 'accessCheck' | 'apex' | 'apexMethod' | 'apexContinuation' | 'client' | 'community' | 'component' | 'contentAssetUrl' | 'customPermission' | 'dynamicComponent' | 'featureFlag' | 'messageChannel' | 'i18n' | 'gate' | 'label' | 'metric' | 'internal' | 'resourceUrl' | 'schema' | 'site' | 'slds' | 'user' | 'userPermission' | 'komaci' | 'webstore';
interface ModuleReference {
    name: string;
    namespacedName?: string;
    sfdcResource?: {
        scoped: SfdcResourceType;
        namespacedId?: string;
        id?: string;
    };
    type: 'lwc' | '@salesforce' | 'local' | 'external';
    locations: SourceLocation[];
    id: ID;
}
type ID = string;
export { ApiDecorator, Class, ClassProperty, ClassMethod, DefaultBinding, DefaultExport, DOMEvent, DynamicImport, DynamicImportHint, EventDispatch, ID, Import, ImportedValue, ModuleNameType, ModuleReference, NamedExport, NamedImport, NamespaceImport, ParentClass, ProgrammaticEventListener, ScriptFile, SfdcResourceType, TrackDecorator, UnresolvedValue, Value, WireDecorator, LwcDecorator, StaticWireProperty, ReactiveWireProperty, isScriptFile, };
