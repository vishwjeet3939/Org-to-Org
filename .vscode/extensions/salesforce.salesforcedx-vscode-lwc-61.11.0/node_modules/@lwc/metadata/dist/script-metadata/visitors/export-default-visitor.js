'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var t = require('@babel/types');
var utils = require('../utils.js');
var utils$1 = require('../../shared/utils.js');

function _interopNamespaceCompat(e) {
    if (e && typeof e === 'object' && 'default' in e) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var t__namespace = /*#__PURE__*/_interopNamespaceCompat(t);

// Copyright (c) 2022, Salesforce, Inc.,
// All rights reserved.
// For full license text, see the LICENSE.txt file
function gatherClassExport(declaration, scope, state) {
    // If the default exported binding is a class, store it for post processing
    switch (declaration.type) {
        case 'ClassDeclaration':
            state.mainClass = declaration;
            break;
        case 'Identifier': {
            const binding = scope.getBinding(declaration.name);
            // If the identifier can be resolved to a binding and the binding is a constant
            // https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#bindings
            if (!utils$1.isUndefined(binding) && utils$1.isTrue(binding.constant)) {
                const { node } = binding.path;
                if (t__namespace.isClass(node)) {
                    state.mainClass = node;
                }
                else if (t__namespace.isVariableDeclarator(node) && t__namespace.isClass(node.init)) {
                    state.mainClass = node.init;
                }
            }
            break;
        }
    }
}
function visitorFunction(state, result) {
    return function ExportDefaultDeclarationVisitorFunction(path) {
        const { declaration } = path.node;
        result.exports.push({
            location: utils.generateSourceLocation(path.node),
            defaultExport: {
                location: utils.generateSourceLocation(declaration),
            },
        });
        gatherClassExport(declaration, path.scope, state);
    };
}

exports.default = visitorFunction;
//# sourceMappingURL=export-default-visitor.js.map
