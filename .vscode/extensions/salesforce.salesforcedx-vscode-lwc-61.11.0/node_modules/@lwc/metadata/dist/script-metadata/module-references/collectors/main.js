'use strict';

var utils$1 = require('../../../shared/utils.js');
var errors = require('../../../errors/errors.js');
var utils = require('./utils.js');

// Copyright (c) 2022, Salesforce, Inc.,
// All rights reserved.
// For full license text, see the LICENSE.txt file
// W-5657951: We need to restrict the set of character in the import identifier since rollup doesn't properly escape
// single quotes. For example the following import would run code that is not lockerized:
// import a from "@salesforce/user/'-alert(window)-'";
const IMPORT_RE = /^[\w-_/.@:]+$/;
function collectReference(collectors, node, state) {
    const source = node.source;
    const { value: moduleSpecifier } = source;
    if (!moduleSpecifier || !moduleSpecifier.match(IMPORT_RE)) {
        throw new errors.MetadataCollectionError([
            utils.createReferenceDiagnostic(source, state.fileName, errors.Errors.INVALID_MODULE_ID, [
                moduleSpecifier,
            ]),
        ]);
    }
    const referenceCollector = collectors.find((collector) => collector.matches(moduleSpecifier));
    if (utils$1.isUndefined(referenceCollector)) {
        // The module specified in the import statement is unrecognizable, flag it as missing resource
        throw new errors.MetadataCollectionError([
            utils.createReferenceDiagnostic(source, state.fileName, errors.Errors.MISSING_RESOURCE_VALUE, [
                moduleSpecifier,
            ]),
        ]);
    }
    return referenceCollector.collect(moduleSpecifier, node, state);
}

exports.collectReference = collectReference;
//# sourceMappingURL=main.js.map
