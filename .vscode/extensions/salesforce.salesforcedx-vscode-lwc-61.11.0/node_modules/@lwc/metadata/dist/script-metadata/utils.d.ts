import * as t from '@babel/types';
import { NodePath, Scope } from '@babel/traverse';
import { SourceLocation } from '../schema/typescript-types/common-metadata-types';
import { State } from '../shared/utils';
import { Class, DOMEvent, EventDispatch, ModuleReference } from '../schema/typescript-types/script-metadata-types';
import { BundleType, NamespaceMapping } from '../shared/config';
export declare const QUOTE_LENGTH = 1;
export declare function generateSourceLocation(node: t.Node | t.Comment, precedingOffset?: number, followingOffset?: number, fileName?: string): SourceLocation;
export declare function isGlobalIdentifier(identifier: t.Identifier, scope: Scope): boolean;
export declare function resolveIdentifierValue(identifier: t.Identifier, scope: Scope): string | undefined;
export declare class ScriptState extends State {
    constructor({ fileName, namespaceMapping, bundleType, source, fileType, }: {
        fileName: string;
        namespaceMapping: NamespaceMapping;
        bundleType: BundleType;
        source: string;
        fileType: ScriptFileType;
    });
    source: string;
    moduleReferenceLookup: Map<string, ModuleReference>;
    eventLookup: Map<t.NewExpression, DOMEvent>;
    eventsPendingResolution: {
        eventDispatch: EventDispatch;
        eventConstructor: t.NewExpression;
    }[];
    classLookup: Map<t.Class, Class>;
    classNodeLookup: Map<Class, NodePath<t.Class>>;
    mainClass?: t.Class;
    fileType: ScriptFileType;
}
export type ScriptFileType = 'js' | 'ts';
export type ClassMember = t.ClassProperty | t.ClassMethod;
export declare function isClassMember(node: t.Node): node is ClassMember;
export declare function isClassPropertyOrAccessor(node: t.Node): boolean;
export declare function getClassMemberName(node: ClassMember): string | undefined;
