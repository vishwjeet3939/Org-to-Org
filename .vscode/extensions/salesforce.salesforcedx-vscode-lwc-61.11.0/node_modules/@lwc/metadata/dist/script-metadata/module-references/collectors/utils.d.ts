import * as t from '@babel/types';
import { CompilerDiagnostic, LWCErrorInfo } from '@lwc/errors';
import { NamespaceMapping } from '../../../shared/config';
import { State } from '../../../shared/utils';
import { ModuleReference, SfdcResourceType } from '../../../schema/typescript-types/script-metadata-types';
import { CollectionStrategy } from './main';
export declare const SALESFORCE_PREFIX = "@salesforce";
export declare function isValidImportForPrefix(prefix: string, source: string): boolean;
export declare function isSalesforceImport(value: string): boolean;
export declare function isLwcReference(value: string): boolean;
export declare const isRelativeImport: (source: string) => boolean;
export declare function createReferenceDiagnostic(sourceNode: t.StringLiteral, fileName: string, errorInfo: LWCErrorInfo, messageArgs: any[]): CompilerDiagnostic;
export declare function getModuleReference(moduleSpecifier: string, sourceNode: t.StringLiteral, state: State, referenceType: 'lwc' | 'local' | 'external' | '@salesforce'): ModuleReference;
export declare function assertOnlyDefaultImport(node: t.ExportAllDeclaration | t.ExportNamedDeclaration | t.ImportDeclaration, fileName: string, prefix: string): void;
export declare function getId(prefix: string, moduleSpecifier: string): string;
export declare function generateSalesforceReference(sourceNode: t.StringLiteral, moduleSpecifier: string, scoped: SfdcResourceType, id: string, namespaceMapping: NamespaceMapping, state: State): ModuleReference;
interface SalesforceModuleCollectorConfig {
    name: SfdcResourceType;
    allowlist?: string[];
}
export declare function createSalesforceModuleCollector(config: SalesforceModuleCollectorConfig): CollectionStrategy;
export {};
