'use strict';

var utils = require('../utils.js');
var utils$1 = require('../../shared/utils.js');
var util = require('./util.js');

// Copyright (c) 2022, Salesforce, Inc.,
// All rights reserved.
// For full license text, see the LICENSE.txt file
const QUALIFIED_LISTENER_OPTIONS = new Set(['capture']);
const DEFAULT_EVENT_LISTENER_OPTIONS = {
    capture: false,
};
function gatherEventListenerMetadata(path, args, methodScope, result) {
    const argsLength = args.length;
    // if addEventListener() has not specified with a type, then there is nothing to gather
    if (argsLength === 0 || (args[0].type !== 'StringLiteral' && args[0].type !== 'Identifier')) {
        return;
    }
    const eventTypeNode = args[0];
    let eventType;
    switch (eventTypeNode.type) {
        case 'StringLiteral':
            eventType = eventTypeNode.value;
            break;
        case 'Identifier':
            eventType = utils.resolveIdentifierValue(eventTypeNode, path.scope);
            break;
    }
    if (utils$1.isUndefined(eventType)) {
        return;
    }
    const eventListener = {
        location: utils.generateSourceLocation(path.node),
        eventType,
        targetType: 'unresolved',
    };
    if (!utils$1.isUndefined(methodScope)) {
        if (methodScope.type === 'ThisExpression') {
            // Is this sufficient to determine that the target is 'host'
            eventListener.targetType = 'host';
        }
        else if (methodScope.type === 'MemberExpression' &&
            methodScope.object.type === 'ThisExpression' &&
            // this.template.addEventListener()
            ((methodScope.property.type === 'Identifier' &&
                methodScope.property.name === 'template') ||
                // this['template'].addEventListener()
                (methodScope.property.type === 'StringLiteral' &&
                    methodScope.property.value === 'template'))) {
            eventListener.targetType = 'shadowRoot';
        }
        else if (methodScope.type === 'Identifier') {
            const identifier = utils.resolveIdentifierValue(methodScope, path.scope);
            if (identifier === 'window' || identifier === 'document') {
                eventListener.targetType = identifier;
            }
        }
    }
    // if no options were specified
    if (argsLength <= 2) {
        eventListener.options = DEFAULT_EVENT_LISTENER_OPTIONS;
    }
    else if (args[2].type === 'ObjectExpression') {
        const filteredOptions = util.extractObjectValue(args[2], DEFAULT_EVENT_LISTENER_OPTIONS, QUALIFIED_LISTENER_OPTIONS);
        if (utils$1.keys(filteredOptions).length > 0) {
            eventListener.options = util.coerceObjectValuesToBoolean(filteredOptions);
        }
    }
    result.eventListeners.push(eventListener);
}

exports.gatherEventListenerMetadata = gatherEventListenerMetadata;
//# sourceMappingURL=event-listener.js.map
