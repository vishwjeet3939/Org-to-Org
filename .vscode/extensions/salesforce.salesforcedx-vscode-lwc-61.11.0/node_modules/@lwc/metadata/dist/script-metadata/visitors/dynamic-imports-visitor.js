'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var scriptMetadataTypes = require('../../schema/typescript-types/script-metadata-types.js');
var utils = require('../utils.js');

// Copyright (c) 2022, Salesforce, Inc.,
// All rights reserved.
// For full license text, see the LICENSE.txt file
function gatherHints(node, fileName) {
    const { trailingComments } = node;
    // Eject if its null or undefined
    if (!trailingComments || trailingComments.length === 0) {
        return [];
    }
    const hints = [];
    const commentNode = trailingComments[0];
    const rawValue = commentNode.value.trim();
    const HINT_REGEX = /^"([^\s"]+)"\s*:\s*"([^"]*)"$/;
    const hintParts = HINT_REGEX.exec(rawValue);
    if (hintParts) {
        // CommentBlock: precedingOffset and followingOffset are 2(/* */)
        // CommentLine: precedingOffset is 2 and followingOffset is 0(//)
        const followingOffset = commentNode.type === 'CommentBlock' ? 2 : 0;
        hints.push({
            rawValue,
            key: hintParts[1],
            value: hintParts[2],
            location: utils.generateSourceLocation(commentNode, 2, followingOffset, fileName),
        });
    }
    return hints;
}
/**
 * Gather metadata about dynamic import statements along with optional hints.
 * https://rfcs.lwc.dev/rfcs/lwc/0112-dynamic-import-hints
 */
function dynamicImportVisitor(state, result) {
    return function DynamicImportVisitorFunction(path) {
        const { bundleType, fileName } = state;
        const sourceNode = path.parent.arguments[0];
        const importLocation = utils.generateSourceLocation(path.parent, undefined, undefined, fileName);
        // Only consider if the module path is a string literal, else do not gather metadata
        if (sourceNode.type !== 'StringLiteral') {
            result.dynamicImports.push({
                moduleSpecifier: 'unresolved',
                moduleNameType: scriptMetadataTypes.ModuleNameType.UNRESOLVED,
                location: importLocation,
                hints: [],
            });
            return;
        }
        const { value: moduleSpecifier } = sourceNode;
        const dynamicImport = {
            moduleSpecifier,
            moduleNameType: scriptMetadataTypes.ModuleNameType.STRING,
            location: importLocation,
            hints: [],
        };
        // Dynamic import hints are supported for internal modules only
        if (bundleType === 'internal') {
            dynamicImport.hints = gatherHints(sourceNode, fileName);
        }
        result.dynamicImports.push(dynamicImport);
    };
}

exports.default = dynamicImportVisitor;
//# sourceMappingURL=dynamic-imports-visitor.js.map
