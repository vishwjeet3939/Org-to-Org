'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('../utils.js');
var reference = require('../module-references/reference.js');

// Copyright (c) 2022, Salesforce, Inc.,
// All rights reserved.
// For full license text, see the LICENSE.txt file
/**
 * Handle export statements like
 *  export * from 'module-specifier';
 *  export * from './local-module';
 */
function visitorFunction(state, result) {
    return function ExportAllDeclarationVisitorFunction(path) {
        const { node } = path;
        const moduleReference = reference.gatherModuleReference(node, state, result);
        const { source: { value: moduleSpecifier }, } = node;
        const loc = node.loc;
        // script file's raw source
        const { source } = state;
        // location of * relative to ExportAllDeclaration node
        const starOffset = source.substring(node.start).indexOf('*');
        let startLine = loc.start.line;
        let startColumn = loc.start.column + 1; // Convert to 1-based
        if (loc.start.line === loc.end.line) {
            startColumn = startColumn + starOffset;
        }
        else {
            for (let i = 0; i < starOffset; i++) {
                if (source.charAt(node.start + i) === '\n') {
                    startLine += 1;
                    startColumn = 1;
                }
                else {
                    startColumn += 1;
                }
            }
        }
        result.exports.push({
            moduleSpecifier,
            refId: moduleReference.id,
            location: utils.generateSourceLocation(node),
            namedExports: [
                {
                    exportedName: '*',
                    location: {
                        startLine,
                        // starOffset => location of '*' relative to export statement begining
                        // 1 => convert babel column from 0-based to 1-based index
                        startColumn,
                        endLine: startLine,
                        // Derived as startColumn + 1, 1 is to account for length of "*"
                        endColumn: startColumn + 1,
                        start: node.start + starOffset,
                        end: node.start + starOffset + 1,
                    },
                },
            ],
        });
    };
}

exports.default = visitorFunction;
//# sourceMappingURL=export-all-visitor.js.map
