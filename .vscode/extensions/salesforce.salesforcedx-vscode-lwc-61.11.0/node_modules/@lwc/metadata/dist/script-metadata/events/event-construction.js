'use strict';

var utils = require('../../shared/utils.js');
var utils$1 = require('../utils.js');
var util = require('./util.js');

// Copyright (c) 2022, Salesforce, Inc.,
// All rights reserved.
// For full license text, see the LICENSE.txt file
const VALID_EVENT_INTERFACES = new Set(['CustomEvent', 'Event']);
const QUALIFIED_EVENT_OPTIONS = new Set(['bubbles', 'composed']);
const DEFAULT_EVENT_OPTIONS = {
    bubbles: false,
    composed: false,
};
function generateEventMetadata(path, eventInterface) {
    const { arguments: args } = path.node;
    // If event type param in constructor is unknown or not statically analyzable, no metadata will be gathered
    if (utils.isEmpty(args) || args[0].type !== 'StringLiteral') {
        return;
    }
    const domEvent = {
        eventType: args[0].value,
        interface: eventInterface,
        location: utils$1.generateSourceLocation(path.node),
        id: '',
    };
    // eventInit options
    if (args.length === 1) {
        // If no event options were specified, return the default values per spec
        domEvent.options = DEFAULT_EVENT_OPTIONS;
    }
    else if (args[1].type === 'ObjectExpression') {
        // Will consider analyzing only event options that are object
        const filteredOptions = util.extractObjectValue(args[1], DEFAULT_EVENT_OPTIONS, QUALIFIED_EVENT_OPTIONS);
        if (utils.keys(filteredOptions).length > 0) {
            domEvent.options = util.coerceObjectValuesToBoolean(filteredOptions);
        }
    }
    return domEvent;
}
function gatherEventMetadata(path, eventInterface, result, state) {
    const domEvent = generateEventMetadata(path, eventInterface);
    // If dom event is not statically analyzable, no metadata will be gathered
    if (utils.isUndefined(domEvent)) {
        return;
    }
    domEvent.id = state.generateReferenceId('DOMEvent', domEvent.eventType);
    state.eventLookup.set(path.node, domEvent);
    result.domEvents.push(domEvent);
}

exports.VALID_EVENT_INTERFACES = VALID_EVENT_INTERFACES;
exports.gatherEventMetadata = gatherEventMetadata;
//# sourceMappingURL=event-construction.js.map
