'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var t = require('@babel/types');
var utils = require('../utils.js');
var errors = require('../../../../errors/errors.js');
var utils$1 = require('../../../../shared/utils.js');

function _interopNamespaceCompat(e) {
    if (e && typeof e === 'object' && 'default' in e) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var t__namespace = /*#__PURE__*/_interopNamespaceCompat(t);

// Copyright (c) 2022, Salesforce, Inc.,
// All rights reserved.
// For full license text, see the LICENSE.txt file
const KOMACI_PREFIX = '@salesforce/komaci';
const SLASH_LENGTH = 1;
function rejectNamespacedImports(node, fileName, prefix) {
    const hasNamespacedImport = node.type === 'ImportDeclaration' &&
        node.specifiers.some((node) => t__namespace.isImportNamespaceSpecifier(node));
    if (hasNamespacedImport) {
        throw new errors.MetadataCollectionError([
            utils.createReferenceDiagnostic(node.source, fileName, errors.Errors.MODULES_DOES_NOT_SUPPORT_NAMESPACED_IMPORTS, [prefix]),
        ]);
    }
}
function getKomaciReference(prefix, moduleSpecifier, node, state) {
    const source = node.source;
    const { fileName, namespaceMapping } = state;
    rejectNamespacedImports(node, fileName, prefix);
    const scoped = prefix.substring(utils.SALESFORCE_PREFIX.length + SLASH_LENGTH);
    const id = utils.getId(prefix, moduleSpecifier);
    if (utils$1.isEmpty(id)) {
        throw new errors.MetadataCollectionError([
            utils.createReferenceDiagnostic(source, fileName, errors.Errors.MISSING_RESOURCE_VALUE, [
                moduleSpecifier,
            ]),
        ]);
    }
    return utils.generateSalesforceReference(source, moduleSpecifier, scoped, id, namespaceMapping, state);
}
const komaciCollector = {
    matches(value) {
        return utils.isValidImportForPrefix(KOMACI_PREFIX, value);
    },
    collect(value, node, state) {
        return getKomaciReference(KOMACI_PREFIX, value, node, state);
    },
};

exports.default = komaciCollector;
//# sourceMappingURL=komaci.js.map
