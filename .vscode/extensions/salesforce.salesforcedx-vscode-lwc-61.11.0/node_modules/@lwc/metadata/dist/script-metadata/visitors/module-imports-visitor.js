'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var reference = require('../module-references/reference.js');
var utils$1 = require('../../shared/utils.js');
var utils = require('../utils.js');
var resolver = require('../resolver.js');

// Copyright (c) 2022, Salesforce, Inc.,
// All rights reserved.
// For full license text, see the LICENSE.txt file
function gatherImportMetadata(node, result, refId) {
    const { source: { value: moduleSpecifier }, specifiers, } = node;
    const importMetadata = {
        moduleSpecifier,
        location: utils.generateSourceLocation(node),
        refId,
    };
    const namedImports = [];
    specifiers.forEach((specifier) => {
        const { local } = specifier;
        const location = utils.generateSourceLocation(specifier);
        switch (specifier.type) {
            case 'ImportDefaultSpecifier': {
                importMetadata.defaultBinding = {
                    name: local.name,
                    location,
                };
                break;
            }
            case 'ImportNamespaceSpecifier': {
                importMetadata.namespaceImport = {
                    aliasName: local.name,
                    location,
                };
                break;
            }
            case 'ImportSpecifier': {
                const { imported } = specifier;
                const importedName = resolver.resolveImportSpecifierImported(imported);
                namedImports.push({
                    name: importedName,
                    aliasName: local.name === importedName ? undefined : local.name,
                    location,
                });
                break;
            }
        }
    });
    if (!utils$1.isEmpty(namedImports)) {
        importMetadata.namedImports = namedImports;
    }
    result.imports.push(importMetadata);
}
function moduleImportVisitor(state, result) {
    return function ImportVisitorFunction(path) {
        const { node } = path;
        const moduleReference = reference.gatherModuleReference(node, state, result);
        gatherImportMetadata(node, result, moduleReference.id);
    };
}

exports.default = moduleImportVisitor;
//# sourceMappingURL=module-imports-visitor.js.map
