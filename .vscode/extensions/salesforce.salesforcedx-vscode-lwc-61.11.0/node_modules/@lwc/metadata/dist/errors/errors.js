'use strict';

var errors = require('@lwc/errors');

// Copyright (c) 2022, Salesforce, Inc.,
// All rights reserved.
// For full license text, see the LICENSE.txt file
// Next error code: 1720
// TODO: add script to display next available error code
const Errors = {
    INVALID_COMMUNITY_ID: {
        code: 1700,
        message: 'Invalid community import "{0}".',
        level: errors.DiagnosticLevel.Error,
    },
    INVALID_LWC_IMPORT: {
        code: 1701,
        message: 'Invalid LWC import',
        level: errors.DiagnosticLevel.Error,
    },
    INVALID_LWC_IMPORT_IDENTIFIER: {
        code: 1702,
        message: 'Invalid LWC imported identifier "{0}"',
        level: errors.DiagnosticLevel.Error,
    },
    INVALID_MODULE_ID: {
        code: 1703,
        message: 'Invalid module identifier "{0}".',
        level: errors.DiagnosticLevel.Error,
    },
    MISSING_RESOURCE_VALUE: {
        code: 1704,
        message: 'Missing resource value for {0}',
        level: errors.DiagnosticLevel.Error,
    },
    MODULES_ONLY_SUPPORT_DEFAULT_IMPORTS: {
        code: 1705,
        message: '{0} modules only support default imports.',
        level: errors.DiagnosticLevel.Error,
    },
    MODULE_SHOULD_HAVE_METHOD_AND_CLASSNAME: {
        code: 1706,
        message: '{0} modules should have both class and method names.',
        level: errors.DiagnosticLevel.Error,
    },
    MODULE_SHOULD_NOT_BE_IMPORTED_FROM_DEFAULT_NAMESPACE: {
        code: 1707,
        message: "{0} modules should not be imported from default namespace 'c'.",
        level: errors.DiagnosticLevel.Error,
    },
    SYNTAX_ERROR: {
        code: 1709,
        message: 'Syntax error encountered while parsing file {0}. Cause: {1}',
        level: errors.DiagnosticLevel.Fatal,
    },
    UNSUPPORTED_SCRIPT_SYNTAX: {
        code: 1711,
        message: 'Unsupported javascript syntax in file {0}',
        level: errors.DiagnosticLevel.Error,
    },
    INVALID_WIRE_USAGE: {
        code: 1712,
        message: '"@wire" decorators need to be invoked with a wire adapter as first argument.',
        level: errors.DiagnosticLevel.Error,
    },
    INVALID_WIRE_CONFIG_USAGE: {
        code: 1713,
        message: '"@wire" decorators need to be invoked with an adapterConfig object as second argument.',
        level: errors.DiagnosticLevel.Error,
    },
    INVALID_API_USAGE: {
        code: 1714,
        message: '"@api" decorator don\'t support argument',
        level: errors.DiagnosticLevel.Error,
    },
    INVALID_TRACK_USAGE: {
        code: 1715,
        message: '"@track" decorator don\'t support argument',
        level: errors.DiagnosticLevel.Error,
    },
    MISSING_ENTRY_FILE: {
        code: 1716,
        message: "Entry file can't be resolved in '{0}'. Expected '{1}.js' or '{1}.css' to be present in the bundle.",
        level: errors.DiagnosticLevel.Fatal,
    },
    MODULES_DOES_NOT_SUPPORT_NAMESPACED_IMPORTS: {
        code: 1719,
        message: '{0} module does not support namespaced import.',
        level: errors.DiagnosticLevel.Error,
    },
};
class MetadataCollectionError extends Error {
    constructor(diagnostics, message) {
        super(message);
        this.privateDiagnostics = diagnostics;
    }
    get diagnostics() {
        return this.privateDiagnostics;
    }
}

exports.Errors = Errors;
exports.MetadataCollectionError = MetadataCollectionError;
//# sourceMappingURL=errors.js.map
