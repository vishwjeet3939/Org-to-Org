'use strict';

// Copyright (c) 2022, Salesforce, Inc.,
// All rights reserved.
// For full license text, see the LICENSE.txt file
/**
 * Returns true if the value is null
 * @param {any} o
 */
function isNull(o) {
    return o === null;
}
/**
 * Returns true if the value is undefined
 * @param {any} o
 */
function isUndefined(o) {
    return o === undefined;
}
/**
 * Returns true if value is true
 * @param {any} o
 */
function isTrue(o) {
    return o === true;
}
/**
 * Returns true if
 *  the value is an array and length is zero or
 *  the value is a string and the trimmed value is an empty string
 * @param {string | Array<any>} o
 */
function isEmpty(o) {
    if (Array.isArray(o) && o.length === 0) {
        return true;
    }
    else if (typeof o === 'string' && o.trim().length === 0) {
        return true;
    }
    return false;
}
/**
 * Returns true if
 *  the value is truthy and has no enumerable keys
 * @param {object} o
 */
function isEmptyObject(o) {
    return o && typeof o === 'object' && Object.keys(o).length === 0;
}
/**
 * Generate a unique reference id for a reference object
 * @param refType Reference type
 * @param idx unique numerical identifier to be appended to the end of the generated id
 * @param name name of the reference
 */
function generateReferenceId(refType, idx, name) {
    return `${refType}#${name}#${idx}`;
}
class State {
    constructor({ fileName, namespaceMapping, bundleType, }) {
        this.idx = 0;
        this.fileName = fileName;
        this.namespaceMapping = namespaceMapping;
        this.bundleType = bundleType;
    }
    generateReferenceId(refType, name) {
        return `${refType}#${name}#${this.idx++}`;
    }
}
// Converts a tag name (e.g. lightning-input-field) into a namespaced
// qualified component name (e.g. lightning/inputField).
function tagNameToComponentName(name) {
    const newName = [];
    let nsFound = false;
    let upper = false;
    for (const currChar of name) {
        if (currChar === '-') {
            if (!nsFound) {
                nsFound = true;
                newName.push('/');
            }
            else {
                upper = true;
            }
        }
        else {
            // Converts kebab case to camel case.
            newName.push(upper ? currChar.toUpperCase() : currChar);
            upper = false;
        }
    }
    return newName.join('');
}
// Converts an element's attribute (e.g. record-id) into a class
// property (e.g. recordId).
//
// TODO: export method toPropertyName in template-compiler's
// shared/utils.ts and utilize that instead.
function attributeNameToPropertyName(name) {
    const newName = [];
    let upper = false;
    for (const currChar of name) {
        if (currChar === '-') {
            upper = true;
        }
        else {
            // Converts kebab case to camel case.
            newName.push(upper ? currChar.toUpperCase() : currChar);
            upper = false;
        }
    }
    return newName.join('');
}
const { assign, keys, hasOwnProperty } = Object;

exports.State = State;
exports.assign = assign;
exports.attributeNameToPropertyName = attributeNameToPropertyName;
exports.generateReferenceId = generateReferenceId;
exports.hasOwnProperty = hasOwnProperty;
exports.isEmpty = isEmpty;
exports.isEmptyObject = isEmptyObject;
exports.isNull = isNull;
exports.isTrue = isTrue;
exports.isUndefined = isUndefined;
exports.keys = keys;
exports.tagNameToComponentName = tagNameToComponentName;
//# sourceMappingURL=utils.js.map
