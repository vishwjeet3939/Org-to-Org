'use strict';

var postcss = require('postcss');
var errors = require('@lwc/errors');
var errors$1 = require('../errors/errors.js');
var utils = require('../shared/utils.js');
var imports = require('./imports.js');
var customProperties = require('./custom-properties.js');
var componentReferences = require('./component-references.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var postcss__default = /*#__PURE__*/_interopDefaultCompat(postcss);

// Copyright (c) 2022, Salesforce, Inc.,
// All rights reserved.
// For full license text, see the LICENSE.txt file
function generateEmptyResult(fileName) {
    return {
        fileType: 'css',
        fileName,
        imports: [],
        componentReferences: [],
        customProperties: [],
        diagnostics: [],
    };
}
function collectCssMetadataFromSource(fileName, source, config) {
    let root;
    try {
        root = postcss__default.default.parse(source, {
            from: fileName,
        });
    }
    catch (error) {
        const result = generateEmptyResult(fileName);
        let location;
        if (!utils.isUndefined(error.line) && !utils.isUndefined(error.column)) {
            location = {
                line: error.line,
                column: error.column,
            };
        }
        return {
            ...result,
            diagnostics: [
                errors.generateCompilerDiagnostic(errors$1.Errors.SYNTAX_ERROR, {
                    messageArgs: [fileName, error.message],
                    origin: {
                        filename: fileName,
                        location,
                    },
                }),
            ],
        };
    }
    return collectCssMetadata(fileName, root, config.namespaceMapping, config.strictCSSTokenCollection);
}
/** Internal API, optimization to reuse existing ast from compilation process **/
function collectCssMetadata(fileName, root, namespaceMapping, strictCSSTokenCollection) {
    const result = generateEmptyResult(fileName);
    imports.collectImports(result, root, namespaceMapping);
    customProperties.collectCustomProperties(result, root, strictCSSTokenCollection);
    componentReferences.collectComponentReferences(result, root, namespaceMapping);
    return result;
}
/** End internal API **/

exports.collectCssMetadataFromSource = collectCssMetadataFromSource;
//# sourceMappingURL=index.js.map
