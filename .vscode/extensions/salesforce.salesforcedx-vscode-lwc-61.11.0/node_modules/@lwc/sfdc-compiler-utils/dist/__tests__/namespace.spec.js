"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const namespace_utils_1 = require("../namespace-utils");
const DEFAULT_NAMESPACE_MAPPING = { c: 'nsC' };
describe('namespace', () => {
    describe('invalid getNamespacedIdForType invocation', () => {
        test('should error if "namespaceMapping" is not provided', () => {
            expect(() => {
                return (0, namespace_utils_1.getNamespacedIdForType)('x/foo', 'module', undefined);
            }).toThrowError('Failed to apply namespace mapping to "x/foo". Missing required "namespaceMapping" parameter');
        });
        test('should error if "moduleName" is not provided', () => {
            expect(() => {
                return (0, namespace_utils_1.getNamespacedIdForType)(undefined, 'module', DEFAULT_NAMESPACE_MAPPING);
            }).toThrowError('Failed to apply namespace mapping to "undefined". Missing required "moduleName" parameter');
        });
        test('should return undefined if resource is missing an "id"', () => {
            expect((0, namespace_utils_1.getNamespacedIdForType)('apex', 'apex', DEFAULT_NAMESPACE_MAPPING)).toBeUndefined();
        });
    });
    describe('invalid getNamespacedIdForResource invocation', () => {
        test('should error if "moduleName" is missing', () => {
            expect(() => {
                return (0, namespace_utils_1.getNamespacedIdForResource)(undefined, DEFAULT_NAMESPACE_MAPPING);
            }).toThrowError('Failed to apply namespace mapping to "undefined". Missing required "moduleName" parameter');
        });
        test('should error if "namespaceMapping" is missing', () => {
            expect(() => {
                return (0, namespace_utils_1.getNamespacedIdForResource)('c/foo', undefined);
            }).toThrowError('Failed to apply namespace mapping to "c/foo". Missing required "namespaceMapping" parameter');
        });
        test('should return undefined if no namespace mapping was matched', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('x/foo', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined if value contains extra separator', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('x//foo', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined if namespaceMapping does not have "c"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('x/foo', { b: 'nsB' });
            expect(actual).toBeUndefined();
        });
    });
    describe('test noop resources', () => {
        test('should return undefined when namespace mapping "accessCheck"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('@salesforce/accessCheck', 'accessCheck', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined when namespace mapping "client"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('@salesforce/client', 'client', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined when namespace mapping "community"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('@salesforce/community/Id', 'community', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined when namespace mapping "cssvars"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('@salesforce/cssvars/id', 'cssvars', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined when namespace mapping "gate"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('@salesforce/gate/foo.bar', 'gate', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined when namespace mapping "i18n"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('@salesforce/i18n/timezone', 'i18n', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined when namespace mapping "metric"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('@salesforce/metric/foo.bar', 'metric', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined when namespace mapping "internal"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('@salesforce/internal/core.appVersion', 'internal', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined when namespace mapping "site"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('@salesforce/site/Id', 'site', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined when namespace mapping "slds"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('@salesforce/slds/index.css', 'slds', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined when namespace mapping "user"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('@salesforce/user/id', 'user', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined when namespace mapping "userPermission"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('@salesforce/userPermission/perm', 'userPermission', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined when namespace mapping "webstore"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('@salesforce/webstore/Id', 'webstore', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
    });
    describe('namespace resource', () => {
        test('should return namespacedId for non-salesforce resource', () => {
            const expected = 'nsC/foo';
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('c/foo', undefined, DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should return "undefined" when namespace does not fully match "c"', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('abc-utils', 'module', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined if namespace match is not at the beginning of the module name', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('./module/c-inner/property', undefined, DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
    });
    describe('namespace label resource', () => {
        test('should return undefined if type is undefined for salesforce resource', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('c.foo', undefined, DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined if namespace value is empty', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('.foo', 'label', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined if namespace contains extra separator', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('c..foo', 'label', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined if resource has namespace but map does not have "c" mapping', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForType)('c.foo', 'label', { abc: 'nsC' });
            expect(actual).toBe('c.foo');
        });
        test('should return existing namespace if default namespace has no mapping', () => {
            const expected = '@salesforce/label/c.label';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/label/c.label', { b: 'nsC' });
            expect(actual).toBe(expected);
        });
        test('should replace default namespace', () => {
            const expected = '@salesforce/label/nsC.label';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/label/c.label', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should replace non-default namespace', () => {
            const expected = '@salesforce/label/nsC.label';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/label/custom.label', {
                custom: 'nsC',
            });
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present', () => {
            const expected = '@salesforce/label/othernamespace.label';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/label/othernamespace.label', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
    });
    describe('namespace resourceUrl resource', () => {
        test('should add namespace if not present', () => {
            const expected = '@salesforce/resourceUrl/nsC__resource';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/resourceUrl/resource', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should return undefined if namespace value is empty', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/resourceUrl/__resource', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined if namespace contains extra separator', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/resourceUrl/c____resource', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should replace default namespace', () => {
            const expected = '@salesforce/resourceUrl/nsC__resource';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/resourceUrl/c__resource', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should return existing namespace if default namespace has no mapping', () => {
            const expected = '@salesforce/resourceUrl/c__resource';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/resourceUrl/c__resource', {
                b: 'nsC',
            });
            expect(actual).toBe(expected);
        });
        test('should replace non-default namespace', () => {
            const expected = '@salesforce/resourceUrl/nsC__resource';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/resourceUrl/abc__resource', {
                abc: 'nsC',
            });
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present', () => {
            const expected = '@salesforce/resourceUrl/anotherNs__resource';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/resourceUrl/anotherNs__resource', { c: 'anotherNs' });
            expect(actual).toBe(expected);
        });
    });
    describe('namespace contentAssetUrl resource', () => {
        test('should add namespace if not present', () => {
            const expected = '@salesforce/contentAssetUrl/nsC__asset';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/contentAssetUrl/asset', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present', () => {
            const expected = '@salesforce/contentAssetUrl/anotherNs__asset';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/contentAssetUrl/anotherNs__asset', { c: 'anotherNs' });
            expect(actual).toBe(expected);
        });
    });
    describe('namespaced messageChannel resource', () => {
        test('should return undefined if a non-custom (no __c) messageChannel is missing a namespace', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/messageChannel/message', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(undefined);
        });
        test('should return namespace when present for non-custom (no __c) messageChannels', () => {
            const expected = '@salesforce/messageChannel/anotherNs__message';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/messageChannel/anotherNs__message', { c: 'anotherNs' });
            expect(actual).toBe(expected);
        });
        test('should add namespace for custom message (__c) types if no namespace present', () => {
            const expected = '@salesforce/messageChannel/nsC__message__c';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/messageChannel/message__c', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should return namespace when present for custom (__c) messageChannels', () => {
            const expected = '@salesforce/messageChannel/anotherNs__message__c';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/messageChannel/anotherNs__message__c', { c: 'anotherNs' });
            expect(actual).toBe(expected);
        });
    });
    describe('namespace customPermission resource', () => {
        test('should add namespace if not present', () => {
            const expected = '@salesforce/customPermission/nsC__perm';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/customPermission/perm', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present', () => {
            const expected = '@salesforce/customPermission/anotherNs__perm';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/customPermission/anotherNs__perm', { c: 'anotherNs' });
            expect(actual).toBe(expected);
        });
    });
    describe('namespace komaci resource', () => {
        test('should add namespace if not present', () => {
            const expected = '@salesforce/komaci/nsC__resource';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/komaci/resource', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present', () => {
            const expected = '@salesforce/komaci/anotherNs__resource';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/komaci/anotherNs__resource', {
                c: 'anotherNs',
            });
            expect(actual).toBe(expected);
        });
    });
    describe('namespace apex resource', () => {
        test('should return undefined if the namespace map is missing the default namespace', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apex/MyClass.methodA', {
                b: 'bNs',
            });
            expect(actual).toBeUndefined();
        });
        test('should return undefined if namespace value is empty', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apex/.methodA', { b: 'bNs' });
            expect(actual).toBeUndefined();
        });
        test('should return undefined if namespace contains extra separator', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apex/MyClass..methodA', {
                b: 'bNs',
            });
            expect(actual).toBeUndefined();
        });
        test('should return undefined if apex resource does not have a method', () => {
            expect((0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apex/MyClass', { c: 'bNs' })).toBeUndefined();
        });
        test('should add namespace if not present', () => {
            const expected = '@salesforce/apex/nsC.MyClass.methodA';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apex/MyClass.methodA', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should replace default namespace', () => {
            const expected = '@salesforce/apex/nsC.MyClass.methodA';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apex/c.MyClass.methodA', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('c with no mapping', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apex/c.MyClass.methodA', {});
            expect(actual).toBe('@salesforce/apex/c.MyClass.methodA');
        });
        test('should replace non-default namespace', () => {
            const expected = '@salesforce/apex/nsC.MyClass.methodA';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apex/abc.MyClass.methodA', {
                abc: 'nsC',
            });
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present', () => {
            const expected = '@salesforce/apex/anotherNamespace.MyClass.methodA';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apex/anotherNamespace.MyClass.methodA', { c: 'anotherNamespace' });
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present in resource and map', () => {
            const expected = '@salesforce/apex/anotherNamespace.MyClass.methodA';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apex/anotherNamespace.MyClass.methodA', { anotherNamespace: 'anotherNamespace' });
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present and map contains default mapping', () => {
            const expected = '@salesforce/apex/anotherNamespace.MyClass.methodA';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apex/anotherNamespace.MyClass.methodA', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should return undefined when provided empty namespace mapping', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apex/MyClass.methodA', {});
            expect(actual).toBeUndefined();
        });
    });
    describe('namespace apexContinuation resource', () => {
        test('should return undefined if the namespace map is missing the default namespace', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apexContinuation/MyClass.methodA', { b: 'bNs' });
            expect(actual).toBeUndefined();
        });
        test('should return undefined if namespace value is empty', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apexContinuation/.methodA', {
                b: 'bNs',
            });
            expect(actual).toBeUndefined();
        });
        test('should return undefined if namespace contains extra separator', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apexContinuation/MyClass..methodA', { b: 'bNs' });
            expect(actual).toBeUndefined();
        });
        test('should return undefined if apex resource does not have a method', () => {
            expect((0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apexContinuation/MyClass', { c: 'bNs' })).toBeUndefined();
        });
        test('should add namespace if not present', () => {
            const expected = '@salesforce/apexContinuation/nsC.MyClass.methodA';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apexContinuation/MyClass.methodA', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should replace default namespace', () => {
            const expected = '@salesforce/apexContinuation/nsC.MyClass.methodA';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apexContinuation/c.MyClass.methodA', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('c with no mapping', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apexContinuation/c.MyClass.methodA', {});
            expect(actual).toBe('@salesforce/apexContinuation/c.MyClass.methodA');
        });
        test('should replace non-default namespace', () => {
            const expected = '@salesforce/apexContinuation/nsC.MyClass.methodA';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apexContinuation/abc.MyClass.methodA', { abc: 'nsC' });
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present', () => {
            const expected = '@salesforce/apexContinuation/anotherNamespace.MyClass.methodA';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apexContinuation/anotherNamespace.MyClass.methodA', { c: 'anotherNamespace' });
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present in resource and map', () => {
            const expected = '@salesforce/apexContinuation/anotherNamespace.MyClass.methodA';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apexContinuation/anotherNamespace.MyClass.methodA', { anotherNamespace: 'anotherNamespace' });
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present and map contains default mapping', () => {
            const expected = '@salesforce/apexContinuation/anotherNamespace.MyClass.methodA';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apexContinuation/anotherNamespace.MyClass.methodA', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should return undefined when provided empty namespace mapping', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/apexContinuation/MyClass.methodA', {});
            expect(actual).toBeUndefined();
        });
    });
    describe('namespace featureFlag resource', () => {
        test('should return undefined if the namespace map is missing the default namespace', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/featureFlag/org.featureName', {
                b: 'bNs',
            });
            expect(actual).toBeUndefined();
        });
        test('should return undefined if namespace value is empty', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/featureFlag/.featureName', {
                b: 'bNs',
            });
            expect(actual).toBeUndefined();
        });
        test('should return undefined if namespace contains extra separator', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/featureFlag/ProductArea..featureName', { b: 'bNs' });
            expect(actual).toBeUndefined();
        });
        test('should return undefined if resource does not have a feature name', () => {
            expect((0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/featureFlag/org', { c: 'bNs' })).toBeUndefined();
        });
        test('should add namespace if not present', () => {
            const expected = '@salesforce/featureFlag/nsC.org.featureName';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/featureFlag/org.featureName', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should replace default namespace', () => {
            const expected = '@salesforce/featureFlag/nsC.org.featureName';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/featureFlag/c.org.featureName', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('c with no mapping', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/featureFlag/c.org.featureName', {});
            expect(actual).toBe('@salesforce/featureFlag/c.org.featureName');
        });
        test('should replace non-default namespace', () => {
            const expected = '@salesforce/featureFlag/nsC.org.featureName';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/featureFlag/abc.org.featureName', { abc: 'nsC' });
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present', () => {
            const expected = '@salesforce/featureFlag/ProductArea.org.featureName';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/featureFlag/ProductArea.org.featureName', { c: 'anotherNamespace' });
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present in resource and map', () => {
            const expected = '@salesforce/featureFlag/ProductArea.org.featureName';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/featureFlag/ProductArea.org.featureName', { ProductArea: 'ProductArea' });
            expect(actual).toBe(expected);
        });
        test('should return namespace if already present and map contains default mapping', () => {
            const expected = '@salesforce/featureFlag/ProductArea.org.featureName';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/featureFlag/ProductArea.org.featureName', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should return undefined when provided empty namespace mapping', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/featureFlag/org.featureName', {});
            expect(actual).toBeUndefined();
        });
    });
    describe('namespace schema resource', () => {
        test('should add namespace if not present', () => {
            const expected = '@salesforce/schema/nsC__CustomObject__c';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/CustomObject__c', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should return undefined if namespace value is empty', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/__CustomObject__c', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should return undefined if namespace contains extra separator', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/c____CustomObject__c', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBeUndefined();
        });
        test('should add namespace on custom fields on standard objects', () => {
            const expected = '@salesforce/schema/Account.nsC__CustomField__c';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/Account.CustomField__c', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should add namespace on custom relationships on standard object', () => {
            const expected = '@salesforce/schema/Account.nsC__Relation__r.Name';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/Account.Relation__r.Name', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should ignore standard object and relationships', () => {
            const expected = '@salesforce/schema/Contact.Account.Name';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/Contact.Account.Name', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should handle mixed standard and custom relationships', () => {
            const expected = '@salesforce/schema/nsC__CustomObject__c.nsC__parentContact__r.Account.Name';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/CustomObject__c.parentContact__r.Account.Name', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should not add a namespace to a custom object with an existing namespace', () => {
            const expected = '@salesforce/schema/ns__CustomObject__c';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/ns__CustomObject__c', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should replace namespace in a custom object with non-default namespace', () => {
            const expected = '@salesforce/schema/nsC__CustomObject__c';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/ns__CustomObject__c', {
                ns: 'nsC',
            });
            expect(actual).toBe(expected);
        });
        test('should not add a namespace to a custom field with an existing namespace', () => {
            const expected = '@salesforce/schema/Account.ns__CustomField__c';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/Account.ns__CustomField__c', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should replace namespace in a custom field with a non-default namespace', () => {
            const expected = '@salesforce/schema/Account.nsC__CustomField__c';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/Account.ns__CustomField__c', { ns: 'nsC' });
            expect(actual).toBe(expected);
        });
        test('should not add a namespace to a custom relationship with an existing namespace', () => {
            const expected = '@salesforce/schema/Account.ns__Relation__r.Name';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/Account.ns__Relation__r.Name', DEFAULT_NAMESPACE_MAPPING);
            expect(actual).toBe(expected);
        });
        test('should replace namespace om a custom relationship with a non-default namespace', () => {
            const expected = '@salesforce/schema/Account.nsC__Relation__r.Name';
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/Account.ns__Relation__r.Name', { ns: 'nsC' });
            expect(actual).toBe(expected);
        });
        test('should return undefined if specified map is empty for one custom object', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/Order_Item__c', {});
            expect(actual).toBeUndefined();
        });
        test('should return undefined if specified map is empty for one custom object', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/Order_Item__c', {});
            expect(actual).toBeUndefined();
        });
        test('should return undefined if specified map is empty for two custom objects', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/Product__c.MSRP__c', {});
            expect(actual).toBeUndefined();
        });
        test('should return undefined if specified map is empty for two custom objects', () => {
            expect(() => {
                (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/Product__c.MSRP__c', undefined);
            }).toThrow('Failed to apply namespace mapping to "@salesforce/schema/Product__c.MSRP__c".' +
                ' Missing required "namespaceMapping" parameter');
        });
        test('should return undefined if namespace map does not contain the match for two custom objects', () => {
            const actual = (0, namespace_utils_1.getNamespacedIdForResource)('@salesforce/schema/Product__c.MSRP__c', {
                abd: 'nsC',
            });
            expect(actual).toBeUndefined();
        });
    });
});
//# sourceMappingURL=namespace.spec.js.map